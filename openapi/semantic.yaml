openapi: 3.0.3
info:
  title: Stratum Core API
  version: 0.1.0
servers:
  - url: /api/v1
paths:
  /describe/{table}:
    get:
      summary: Describe table schema, profile, and NL description
      parameters:
        - name: table
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeResponse'
  /find:
    get:
      summary: Find relevant tables/columns/documents by query
      parameters:
        - name: q
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindResponse'
  /ask:
    post:
      summary: Natural language to verified SQL + execution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AskRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AskResponse'
components:
  schemas:
    DescribeResponse:
      type: object
      properties:
        table: { type: string }
        columns:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              type: { type: string }
              description: { type: string }
        profile:
          type: object
          additionalProperties: true
        sample_rows:
          type: array
          items: { type: object, additionalProperties: true }
        nl_description: { type: string }
    FindResponse:
      type: object
      properties:
        query: { type: string }
        matches:
          type: array
          items:
            type: object
            properties:
              kind: { type: string, enum: [table, column, document] }
              catalog: { type: string, description: "For table/column results" }
              table: { type: string, description: "For table/column results: schema.table" }
              name: { type: string, description: "For column results: column name" }
              doc_id: { type: string, description: "For document results: source URI or ID" }
              snippet: { type: string, description: "For document results: short text preview" }
              score: { type: number }
    AskRequest:
      type: object
      properties:
        query: { type: string }
        max_rows: { type: integer, default: 100 }
        catalogs:
          type: array
          items: { type: string }
          description: "Optional: restrict SQL planning/execution to specific Trino catalogs"
        explain_only: { type: boolean, default: false }
        include_passages: { type: boolean, default: true }
        top_k_passages: { type: integer, default: 3 }
    AskResponse:
      type: object
      properties:
        sql: { type: string }
        verified: { type: boolean }
        engine: { type: string }
        metadata:
          type: object
          properties:
            catalog: { type: string }
            catalogs:
              type: array
              items: { type: string }
            routed_reason: { type: string }
            duration_ms: { type: integer }
            bytes_scanned: { type: integer }
            query_id: { type: string }
        rows:
          type: array
          items: { type: object, additionalProperties: true }
        passages:
          type: array
          description: "Optional: passages from unstructured retrieval"
          items:
            type: object
            properties:
              doc_id: { type: string }
              page: { type: integer }
              snippet: { type: string }
              score: { type: number }
        stats:
          type: object
          properties:
            duration_ms: { type: integer }
            row_count: { type: integer }
        provenance:
          type: object
          properties:
            tables:
              type: array
              items: { type: string }
            documents:
              type: array
              items: { type: string }
        frames:
          type: array
          description: "Optional: multiple result frames when stitching across sources"
          items:
            type: object
            properties:
              name: { type: string }
              rows:
                type: array
                items: { type: object, additionalProperties: true }
              provenance:
                type: object
                additionalProperties: true
